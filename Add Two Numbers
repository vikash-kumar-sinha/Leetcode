/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
      ListNode* head=NULL;
      ListNode* p=head;
      int borrow=0;
       while(l1!=NULL && l2!=NULL)
       {
          
          int sum=l1->val+l2->val+borrow;
           borrow=sum/10;
           int digit=sum%10;
           ListNode* newnode=new ListNode(digit);
          if(head==NULL)
          {head=newnode;
          p=newnode;
          }else
          {
              p->next=newnode;
              p=newnode;
          }
        l1=l1->next;
        l2=l2->next;
       } 
       while(l1!=NULL)
       {
           int sum=l1->val+borrow;
           borrow=sum/10;
           int digit=sum%10;
            ListNode* newnode=new ListNode(digit);
            p->next=newnode;
            p=newnode;
            l1=l1->next;

       }

       while(l2!=NULL)
       {
           int sum=l2->val+borrow;
           borrow=sum/10;
           int digit=sum%10;
            ListNode* newnode=new ListNode(digit);
            p->next=newnode;
            p=newnode;
            l2=l2->next;
       }

       if(borrow!=0)
       {
            ListNode* newnode=new ListNode(borrow);
            p->next=newnode;
            p=newnode;
       }
       return head;
    }
};
